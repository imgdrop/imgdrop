name: CI
on: push

jobs:
  install:
    name: Install Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - run: yarn --frozen-lockfile
      - uses: actions/cache@v1
        with:
          key: install-${{ github.sha }}
          path: node_modules

  webp:
    name: Build WebP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v1
      - uses: mymindstorm/setup-emsdk@v4
      - run: make -C wasm/webp ci -j4
      - uses: actions/cache@v1
        with:
          key: webp-${{ github.sha }}
          path: wasm/webp

  jp2:
    name: Build JPEG 2000
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v1
      - uses: mymindstorm/setup-emsdk@v4
      - run: make -C wasm/jp2 ci -j4
      - uses: actions/cache@v1
        with:
          key: jp2-${{ github.sha }}
          path: wasm/jp2

  raw:
    name: Build LibRaw
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v1
      - uses: mymindstorm/setup-emsdk@v4
      - run: make -C wasm/raw ci -j4
      - uses: actions/cache@v1
        with:
          key: raw-${{ github.sha }}
          path: wasm/raw

  build:
    name: Build Website
    runs-on: ubuntu-latest
    needs:
      - install
      - webp
      - jp2
      - raw
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v1
        with:
          key: install-${{ github.sha }}
          path: node_modules
      - uses: actions/cache@v1
        with:
          key: webp-${{ github.sha }}
          path: wasm/webp
      - uses: actions/cache@v1
        with:
          key: jp2-${{ github.sha }}
          path: wasm/jp2
      - uses: actions/cache@v1
        with:
          key: raw-${{ github.sha }}
          path: wasm/raw
      - run: yarn build
      - uses: actions/cache@v1
        with:
          key: build-${{ github.sha }}
          path: public

  lint:
    name: Lint Files
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v1
        with:
          key: install-${{ github.sha }}
          path: node_modules
      - run: yarn lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v1
        with:
          key: install-${{ github.sha }}
          path: node_modules
      - run: yarn test
      - uses: codecov/codecov-action@v1

  deploy:
    name: Deploy Draft
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v1
      - with:
          key: build-${{ github.sha }}
          path: public
      - uses: netlify/actions/cli@master
        with:
          args: deploy
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  deploy-prod:
    name: Deploy Porduction
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
      - test
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v1
      - with:
          key: build-${{ github.sha }}
          path: public
      - uses: netlify/actions/cli@master
        with:
          args: deploy --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
